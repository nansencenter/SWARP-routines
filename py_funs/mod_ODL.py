# functions for handling ODL data
import datetime as DTM
import shapely.geometry as SHG
import shapely.wkt as SHW
import datetime as dtm
import os,sys
from mpl_toolkits.basemap import Basemap,pyproj
import numpy as np


################################################################################################
def ODL_basemap():
   # projection used by ODL - EPSG:3413
   lonc     = -45.      # central meridian (x=0)
   latc     = 90.       # central lat
   lat_ts   = 70.       # standard parallel (true scale lat)
   ellps    = 'WGS84'   # shape of earth
   width    = 5000.e3   # width of domain in m
   height   = 5000.e3   # height of domain in m

   # basemap corresponding to the projection
   bmap     = Basemap(projection='stere',ellps=ellps,\
                        lon_0=lonc,lat_0=latc,lat_ts=lat_ts,\
                        width=width,height=height)
   return bmap
################################################################################################


################################################################################################
def ODL_ll2xy(x,y,inverse=False):
   map   = pyproj.Proj("+init=EPSG:3413") # LatLon with WGS84 datum
   x,y   = map(x,y,inverse=inverse)
   return x,y
################################################################################################


################################################################################################
class ODL_poly_info:

   #############################################################################################
   def __init__(self,D,wavdir=None):
      import numpy as np

      #date and time of image
      self.reftime   = dtm.datetime(1970,1,1,0,0,0)
      T              = D['date']       # ms since tref
      self.datetime  = self.reftime+dtm.timedelta(0,seconds=int(T/1.e3))

      # polygon info
      P           = SHW.loads(D['wkt'])
      x,y         = P.exterior.coords.xy
      self.xpoly  = x
      self.ypoly  = y

      # geographical info
      bmap     = ODL_basemap()
      tmap     = ODL_ll2xy
      lon,lat  = tmap(x,y,inverse=True)
      #
      self.basemap   = bmap
      self.xy2ll     = tmap
      self.lon_poly  = lon
      self.lat_poly  = lat

      # origin of local coordinate system
      self.xcen  = np.mean(x)
      self.ycen  = np.mean(y)
      self.lon_cen,self.lat_cen  = tmap(self.xcen,self.ycen,inverse=True)

      # sets up 'local' basemap
      self.make_local_basemap()

      self.wavdir = wavdir
      if wavdir is None:
         # use PCA analysis to orient local coord system
         xy_rel   = np.array([x-self.xcen,y-self.ycen]) # 2xN matrix
         cov      = xy_rel.dot(xy_rel.transpose()) # covariance (2x2 matrix)

         # reorder so 1st eig is bigger (so X represents the major axis)
         evals,evecs    = np.linalg.eig(cov)
         tmp            = sorted([(lam,i) for i,lam in enumerate(evals)],reverse=True)
         self.evals,jj  = np.array(tmp).transpose()
         jj             = [int(j) for j in jj]

         self.rotation_matrix_xy2XY = evecs[:,jj].transpose()

      else:
         # orient with wave direction (if known)
         ang   = np.pu/180.*wavdir
         v     = -np.cos(ang)
         u     = -np.sin(ang)
         V     = np.array([v])
         U     = np.array([u])

         self.wave_vector_ll=np.array([u,v])

         # rotate waved direction to basemap
         lons      = np.zeros((1,))
         lats      = np.zeros((1,))
         lons[0]   = self.loncen
         lats[0]   = self.latcen

         # rotate to x,y frame
         U,V = bmap.rotate_vector(U,V,lons,lats)
         u   = U[0]
         v   = V[0]

         self.wave_vector_xy        = np.array([u,v])
         self.wave_vector_XY        = np.array([1,0]) # new wave dirn is in dirn of postive X axis
         self.rotation_matrix_xy2XY = np.array([[u,v],[-v,u]])

      # coords of poly in transformed coords
      self.Xpoly,self.Ypoly   = self.mapper_xy2XY(x,y,inverse=False)

      return
   #############################################################################################


   ################################################################
   def nearestDate(self,dates):
      # FUNCTION FIND NEAREST TIME RECORD TO self.datetime
      ################################################################
      # dates: list of dates in datetime format
     return min(dates, key=lambda x: abs(x - self.datetime))
   ################################################################

      
   #######################################################################################
   def mapper_xy2XY(self,x,y,inverse=False):
      """
      *mapper to change from (x,y) to (x',y')
      - rotated coordinates relative to principal components
      *use inverse=True to go from (x',y') to (x,y)
      """

      import numpy as np


      x  = np.array(x)
      y  = np.array(y)
      if len(x.shape)==0:
         # x,y scalars
         shp   = None
         x     = np.array([x])
         y     = np.array([y])
      else:
         shp   = x.shape
         sz    = x.size
         x     = np.reshape(x,(sz,))
         y     = np.reshape(y,(sz,))

      if not inverse:
         # in:  basemap coordinates
         # out: coordinates relative to principal components
         xy_rel   = np.array([x-self.xcen,y-self.ycen]) # 2xN matrix
         X,Y      = self.rotation_matrix_xy2XY.dot(xy_rel)
      else:
         # in:  coordinates relative to principal components
         # out: basemap coordinates
         xy    = np.array([x,y])
         X,Y   = self.rotation_matrix_xy2XY.transpose().dot(xy)
         X     = X+self.xcen
         Y     = Y+self.ycen

      if shp is None:
         # back to scalars
         X  = X[0]
         Y  = Y[0]
      else:
         X  = np.reshape(X,shp)
         Y  = np.reshape(Y,shp)

      return X,Y
   #######################################################################################


   #######################################################################################
   def mapper_ll2XY(self,lon,lat,inverse=False):

      if not inverse:
         x,y   = self.xy2ll(lon,lat)
         X,Y   = self.mapper_xy2XY(x,y)
      else:
         x,y   = self.mapper_xy2XY(lon,lat,inverse=True) # X,Y -> x,y
         X,Y   = self.xy2ll(x,y,inverse=True)          # x,y -> lon,lat

      return X,Y
   #######################################################################################


   #######################################################################################
   def get_rectangle(self,latlon=False,factor=1.):
      Xmin  = np.min(self.Xpoly)
      Xmax  = np.max(self.Xpoly)
      Ymin  = np.min(self.Ypoly)
      Ymax  = np.max(self.Ypoly)
      #
      X  = factor*np.array([Xmin,Xmax,Xmax,Xmin,Xmin])
      Y  = factor*np.array([Ymin,Ymin,Ymax,Ymax,Ymin])
      # for i,x in enumerate(X):
      #    y  = Y[i]
      #    X[i]  = self.xcen+factor*(x-self.xcen)
      #    Y[i]  = self.ycen+factor*(y-self.ycen)

      if latlon:
         X,Y   = self.mapper_ll2XY(X,Y,inverse=True)

      return X,Y
   #######################################################################################

   ################################################################
   def make_local_basemap(self):
      # NEW projection centered around polygon area
      dist=2000. # hor and ver size of area in km
      # projection - EPSG:3413
      lonc     = self.lon_cen      # central meridian (x=0)
      latc     = self.lat_cen       # central lat
      lat_ts   = latc      # standard parallel (true scale lat)
      ellps    = 'WGS84'   # shape of earth
      width    = dist*1.e3   # width of domain in m
      height   = dist*1.e3   # height of domain in m

      #) basemap corresponding to the projection
      self.plotmap     = Basemap(projection='stere',ellps=ellps,\
                           lon_0=lonc,lat_0=latc,lat_ts=lat_ts,\
                           width=width,height=height,resolution='i')
      return
   ################################################################


   ################################################################
   def test_plot(self,latlon=True):
      fig   = plt.figure()
      ax    = fig.add_subplot(1,1,1)

      if latlon:
         # plot polygon
         bmap  = opi.plotmap
         bmap.plot(opi.lon_poly,opi.lat_poly,latlon=True,ax=ax)

         # plot corners of domain
         lon_cnr,lat_cnr   = opi.get_rectangle(latlon=True,factor=2.)
         bmap.plot(lon_cnr,lat_cnr,latlon=True,ax=ax)
         Fplt.finish_map(bmap)
         plt.show(fig)
         ax.cla()
         plt.close(fig)
   ################################################################


#########################################################
# exported polygons from ODL portal
def get_polys():
   polys = []

   # copy polygons manually from ODL portal
   # (we can also draw new lines/polygons)
   polys.append({"wkt":"POLYGON((759181.6059733 -471677.2810963,753244.1059733 -399302.2810963,798994.1059733 -369177.2810963,868119.1059733 -386489.7810963,859494.1059733 -459552.2810963,837994.1059733 -478802.2810963,824744.1059733 -498427.2810963,831119.1059733 -547239.7810963,819806.6059733 -560396.0310963,803853.4809733 -557810.0935963,797900.3559733 -576724.1560963,814494.1059733 -596552.2810963,816994.1059733 -653552.2810963,842931.6059733 -689552.2810963,816150.3559733 -717302.2810963,831369.1059733 -740552.2810963,855244.1059733 -735052.2810963,885712.8559733 -777146.0310963,892681.6059733 -796239.7810963,866369.1059733 -797927.2810963,832681.6059733 -813364.7810963,841119.1059733 -840927.2810963,835994.1059733 -856802.2810963,821244.1059733 -877302.2810963,803337.8559733 -845911.6560963,806431.6059733 -821271.0310963,815619.1059733 -796489.7810963,827431.6059733 -774708.5310963,821681.6059733 -765552.2810963,826681.6059733 -751396.0310963,808244.1059733 -738630.4060963,801619.1059733 -722247.5935963,797744.1059733 -708489.7810963,786931.6059733 -701833.5310963,779244.1059733 -695614.7810963,774744.1059733 -689208.5310963,768994.1059733 -667599.1560963,768369.1059733 -652739.7810963,765869.1059733 -634521.0310963,765869.1059733 -627817.9060963,760244.1059733 -619989.7810963,743244.1059733 -604489.7810963,757056.6059733 -589896.0310963,763494.1059733 -579239.7810963,764431.6059733 -557927.2810963,759744.1059733 -539739.7810963,755931.6059733 -525958.5310963,761306.6059733 -512989.7810963,772150.3559733 -507271.0310963,764634.7309733 -490286.6560963,759181.6059733 -471677.2810963))","date":1412484984000}) # 1

   polys.append({"wkt":"POLYGON((930250 -2055843.75,914125 -2084921.875,902312.5 -2096148.4375,880093.75 -2107511.71875,871750 -2118187.5,860125 -2139281.25,859312.5 -2197203.125,855156.25 -2230117.1875,855140.625 -2240814.453125,857531.25 -2250136.71875,850500 -2256968.75,842500 -2270539.0625,839625 -2281984.375,836515.625 -2282910.15625,831781.25 -2279523.4375,795093.75 -2287593.75,791820.3125 -2294039.0625,793859.375 -2303203.125,799742.1875 -2317367.1875,800781.73828125 -2323336.42578125,792477.5390625 -2323805.6640625,788119.140625 -2323587.890625,778041.9921875 -2330541.9921875,773589.84375 -2339433.59375,764138.671875 -2362279.296875,759971.19140625 -2374826.66015625,756897.4609375 -2384249.0234375,750688.720703125 -2385647.705078125,741542.48046875 -2378358.88671875,735552.490234375 -2374945.068359375,724468.75 -2379093.75,749843.75 -2430562.5,759356.4453125 -2448552.734375,784869.140625 -2453542.96875,797894.53125 -2442023.4375,796945.3125 -2414484.375,767546.875 -2398906.25,798750 -2387250,826500 -2330250,847500 -2302250,870750 -2293750,881750 -2282250,877000 -2261000,864656.25 -2241781.25,862328.125 -2232421.875,862312.5 -2220156.25,871656.25 -2206484.375,876328.125 -2194148.4375,873187.5 -2172250,867375 -2144875,881500 -2124250,878125 -2116125,918000 -2094875,925468.75 -2077812.5,932234.375 -2066250,930250 -2055843.75))","date":1421567640000}) # 2

   polys.append({"wkt":"POLYGON((566062.5 -2527500,576187.5 -2518687.5,585875 -2517062.5,587812.5 -2530250,595375 -2541937.5,600812.5 -2550062.5,616562.5 -2536125,613437.5 -2523312.5,627187.5 -2511500,636750 -2498500,641000 -2488625,637000 -2478250,636250 -2471312.5,638125 -2459000,660375 -2461500,695187.5 -2459125,712875 -2450187.5,713687.5 -2430812.5,712750 -2391000,711125 -2347000,700437.5 -2345687.5,691500 -2361250,682187.5 -2374125,680562.5 -2381250,674062.5 -2386250,663687.5 -2382562.5,653562.5 -2392562.5,651562.5 -2398500,647312.5 -2400437.5,639937.5 -2401062.5,634500 -2399062.5,626437.5 -2388500,622250 -2380687.5,620562.5 -2377187.5,615250 -2375812.5,611375 -2374625,605125 -2375937.5,599250 -2380250,595062.5 -2385250,590875 -2396937.5,590125 -2402562.5,585250 -2413125,581437.5 -2411250,574062.5 -2397000,568125 -2395375,564000 -2405875,567812.5 -2413562.5,570562.5 -2425000,564562.5 -2422625,562000 -2430937.5,559312.5 -2434187.5,560750 -2439062.5,560187.5 -2444562.5,558125 -2448937.5,556812.5 -2453000,558687.5 -2458437.5,559750 -2465812.5,559375 -2471562.5,557687.5 -2470750,555500 -2466625,554250 -2458250,549625 -2454250,543625 -2451125,539500 -2451312.5,536500 -2444062.5,535750 -2438250,531687.5 -2435187.5,528687.5 -2445812.5,537312.5 -2461500,542187.5 -2475062.5,548000 -2484875,550812.5 -2489062.5,550750 -2494875,545437.5 -2498875,543500 -2504687.5,540937.5 -2521000,540000 -2543687.5,533250 -2550875,524375 -2555562.5,518750 -2559625,504062.5 -2566875,502062.5 -2572875,500375 -2578812.5,495500 -2586937.5,492187.5 -2586562.5,491875 -2596500,489625 -2603375,481937.5 -2613000,479125 -2617750,475125 -2623812.5,470125 -2626312.5,466562.5 -2624437.5,464000 -2621875,463875 -2666062.5,474750 -2669562.5,499687.5 -2676250,507562.5 -2674312.5,519875 -2673500,515750 -2665875,509500 -2662125,509125 -2655812.5,518000 -2642187.5,528937.5 -2626937.5,526062.5 -2611187.5,520500 -2611750,515750 -2618625,514187.5 -2599625,522625 -2596000,534375 -2591812.5,541187.5 -2590562.5,548000 -2592000,552500 -2596125,557250 -2599687.5,560687.5 -2592000,557937.5 -2580875,561187.5 -2565875,565187.5 -2556875,583125 -2564937.5,589750 -2557250,576875 -2549375,570000 -2546375,569062.5 -2538500,564000 -2530125,566062.5 -2527500))","date":1421838000000}) # 3 - CROSS-SWELL

   polys.append({"wkt":"POLYGON((341937.5 -2660421.875,318156.25 -2661671.875,312125 -2657921.875,309093.75 -2665953.125,297781.25 -2681679.6875,270156.25 -2685968.75,264375 -2677765.625,251562.5 -2678109.375,242187.5 -2685796.875,261937.5 -2695171.875,264436.5234375 -2709101.07421875,253685.546875 -2704530.2734375,252683.59375 -2710888.671875,247179.6875 -2712605.46875,256171.875 -2721039.0625,242656.25 -2724906.25,253125 -2739640.625,215156.25 -2742515.625,212500 -2750109.375,225437.5 -2774359.375,229718.75 -2793453.125,237562.5 -2799984.375,238843.75 -2805859.375,230875 -2806796.875,240406.25 -2816609.375,218859.375 -2826078.125,223250 -2846046.875,222609.375 -2864828.125,228468.75 -2889890.625,221328.125 -2908953.125,215539.0625 -2916062.5,210593.75 -2930453.125,214515.625 -2949437.5,205000 -2966453.125,209093.75 -2989125,184640.625 -3015148.4375,185539.0625 -3018410.15625,225062.5 -3015671.875,248937.5 -2974421.875,257937.5 -2929421.875,246937.5 -2913421.875,247187.5 -2881671.875,270687.5 -2886421.875,282437.5 -2876421.875,289937.5 -2849421.875,284937.5 -2830421.875,298937.5 -2770421.875,299937.5 -2740421.875,332937.5 -2710421.875,341937.5 -2660421.875))","date":1422520200000}) # 4

   polys.append({"wkt":"POLYGON((837718.75 -1477578.125,835718.75 -1488265.625,834718.75 -1515640.625,841156.25 -1565828.125,851703.125 -1603500,836339.84375 -1653292.96875,858783.203125 -1694814.453125,857706.54296875 -1740819.82421875,853187.3779296875 -1785133.6669921875,851559.9822998047 -1802547.8973388672,875621.2844848633 -1830505.012512207,871035.1972579956 -1856812.1519088745,886561.0668063164 -1919362.5981211662,878005.0341933966 -1957937.7096742392,884866.0260401666 -2002956.4875625074,891786.1500210129 -2013302.584798541,891456.2740018591 -2032398.6820345744,886123.8049970707 -2064297.7063435828,880134.2756842715 -2100119.520362896,853291.8345201716 -2120347.2471153103,842831.2242291466 -2155529.1788034136,835528.5716563903 -2185012.161725439,817890.4085132013 -2223195.4074559454,799763.7631203027 -2267515.1881722584,785638.3517720781 -2318438.8833513367,766810.17535355 -2342741.8452487215,737550.4033012339 -2366185.9654858946,721690.722924599 -2373551.4067433067,744081.0425479641 -2418916.8480007183,767861.6817946944 -2404397.7305155415,768172.9602881549 -2389359.495545188,759045.5172750759 -2383533.025604481,760290.6312489179 -2367880.0857230676,788521.0871442859 -2362768.3261974137,782731.9989350219 -2343294.807146106,793325.6460979658 -2328400.7309408756,800512.9404238533 -2307612.578530415,814762.117727404 -2263709.968888572,828758.8269416068 -2227599.5303211985,853252.2453700122 -2193628.653186452,867225.9190836342 -2179995.144647465,879370.6139381216 -2147711.110491517,893949.3933560717 -2116824.973867724,908014.5110278719 -2092530.4273725525,906894.7463714721 -2080191.334382209,920415.6877458736 -2061084.962420835,915457.5704946765 -2046372.218498087,905791.3359922823 -2045446.7306525912,905876.3979827054 -2020494.779270608,919296.5219635516 -2018340.8765066415,917477.0178869367 -1974975.2654507756,903699.0015804768 -1927012.821227312,891836.9363546371 -1887413.044333458,882638.6754512787 -1848263.9367580414,896742.1536445618 -1857215.7216072083,898949.1100311279 -1848619.291305542,891776.9355773926 -1805733.570098877,871432.5866699219 -1800212.1276855469,886177.7954101562 -1770040.5883789062,884168.212890625 -1758447.509765625,877004.8828125 -1712450.1953125,869476.5625 -1665585.9375,860000 -1608671.875,850093.75 -1550015.625,838906.25 -1482015.625,837718.75 -1477578.125))","date":1422601992000}) # 5 - NORTH

   polys.append({"wkt":"POLYGON((546437.5 -2595703.125,553250 -2592375,557312.5 -2584546.875,556937.5 -2563765.625,569625 -2563171.875,579562.5 -2557203.125,587062.5 -2574203.125,604375 -2582328.125,621562.5 -2579703.125,622937.5 -2572265.625,616500 -2560390.625,626031.25 -2548046.875,628062.5 -2538203.125,623562.5 -2529203.125,628062.5 -2518703.125,618562.5 -2506140.625,620187.5 -2496515.625,627437.5 -2490203.125,628562.5 -2441703.125,623562.5 -2430703.125,616062.5 -2414203.125,607125 -2404578.125,610062.5 -2392703.125,618125 -2387953.125,626125 -2388703.125,635562.5 -2397703.125,661062.5 -2401203.125,649062.5 -2420703.125,643062.5 -2435703.125,660687.5 -2439765.625,684000 -2436203.125,694875 -2417078.125,717562.5 -2413703.125,729812.5 -2427203.125,715750 -2435015.625,721781.25 -2438765.625,721437.5 -2446015.625,734875 -2454671.875,760250 -2453390.625,717187.5 -2366515.625,702765.625 -2376640.625,679718.75 -2389828.125,662375 -2391703.125,644687.5 -2392125,620750 -2383921.875,608875 -2387015.625,603937.5 -2396078.125,597015.625 -2414359.375,600843.75 -2425515.625,620500 -2434328.125,622937.5 -2477578.125,623281.25 -2486890.625,615000 -2500203.125,599437.5 -2525953.125,599937.5 -2541296.875,575000 -2542500,546187.5 -2558953.125,532125 -2566328.125,546437.5 -2595703.125))","date":1422642744000}) # 5 - SOUTH

   polys.append({"wkt":"POLYGON((598247.56939373 -2375319.1582167,576810.06939373 -2391069.1582167,561653.81939373 -2405444.1582167,563013.19439373 -2426006.6582167,543630.38189373 -2426350.4082167,520060.06939373 -2455569.1582167,517028.81939373 -2489694.1582167,511763.19439373 -2494256.6582167,502005.38189373 -2491475.4082167,498688.97564373 -2513272.2832167,484497.56939373 -2529131.6582167,469903.81939373 -2545491.0332167,462560.06939373 -2558600.4082167,454575.69439373 -2567342.5957167,462216.31939373 -2576209.7832167,469685.06939373 -2587256.6582167,473278.81939373 -2598912.9082167,466450.69439373 -2611366.0332167,462935.06939373 -2636381.6582167,473028.81939373 -2659725.4082167,487997.56939373 -2692069.1582167,499810.06939373 -2674944.1582167,500966.31939373 -2658881.6582167,509247.56939373 -2652256.6582167,524685.06939373 -2658850.4082167,531622.56939373 -2672944.1582167,553622.56939373 -2660444.1582167,575435.06939373 -2630631.6582167,588497.56939373 -2610694.1582167,603310.06939373 -2602694.1582167,621122.56939373 -2599944.1582167,638560.06939373 -2601194.1582167,653497.56939373 -2599444.1582167,656372.56939373 -2595131.6582167,652372.56939373 -2590037.9082167,657372.56939373 -2585553.5332167,654622.56939373 -2578444.1582167,646622.56939373 -2560444.1582167,665122.56939373 -2562069.1582167,671622.56939373 -2544444.1582167,653185.06939373 -2540256.6582167,641716.31939373 -2549600.4082167,629935.06939373 -2551381.6582167,644841.31939373 -2530537.9082167,652185.06939373 -2507819.1582167,656841.31939373 -2504319.1582167,660060.06939373 -2488694.1582167,653341.31939373 -2474194.1582167,650419.44439373 -2480069.1582167,649708.50689373 -2468694.1582167,647622.56939373 -2461944.1582167,644435.06939373 -2456006.6582167,640872.56939373 -2456444.1582167,634091.31939373 -2460506.6582167,628560.06939373 -2460944.1582167,623716.31939373 -2458631.6582167,619122.56939373 -2452069.1582167,626560.06939373 -2447131.6582167,629622.56939373 -2441944.1582167,637872.56939373 -2448006.6582167,653997.56939373 -2451444.1582167,658997.56939373 -2457381.6582167,662372.56939373 -2458194.1582167,638122.56939373 -2402069.1582167,614997.56939373 -2349444.1582167,608247.56939373 -2354006.6582167,604872.56939373 -2361569.1582167,598247.56939373 -2375319.1582167))","date":1424112048000}) # 6

   polys.append({"wkt":"POLYGON((922171.875 -2087265.625,904968.75 -2102328.125,866492.1875 -2118984.375,858515.625 -2138640.625,852265.625 -2176203.125,848828.125 -2197484.375,845140.625 -2220265.625,835265.625 -2273765.625,815265.625 -2299765.625,815265.625 -2326765.625,793265.625 -2360765.625,806550.78125 -2387093.75,816193.359375 -2413257.8125,770014.6484375 -2485339.84375,702925.29296875 -2502380.859375,651380.615234375 -2457901.3671875,616608.2763671875 -2431661.62109375,597222.1069335938 -2450541.748046875,601875.5645751953 -2482949.2797851562,599529.0222167969 -2500981.8115234375,590682.4798583984 -2541201.8432617188,613259.2086791992 -2576311.8591308594,638120.9814548492 -2569252.79712677,646086.4246487617 -2550988.0316257477,656569.146245718 -2552355.6488752365,660051.8678426743 -2563723.2661247253,635982.7542304993 -2599193.7351226807,556706.2997817993 -2592075.611114502,486929.84533309937 -2630957.4871063232,441041.6181087494 -2678398.425102234,369597.5044965744 -2704618.894100189,350375.4476904869 -2681729.128599167,428903.3908843994 -2650464.3630981445,449280.78866004944 -2628452.176094055,459408.18643569946 -2605814.989089966,466912.9819869995 -2584040.615081787,474172.5730895996 -2565741.8670654297,483284.34586524963 -2566651.5550613403,488896.11864089966 -2547561.243057251,505244.6641921997 -2520005.6190490723,532191.7552947998 -2530394.371032715,568888.8463973999 -2493283.1230163574,585112.3919487 -2525352.4990081787,587036.66472435 -2521762.1870040894,591335.9375 -2507421.875,588212.890625 -2476992.1875,593214.84375 -2452062.5,589622.0703125 -2433441.40625,593654.296875 -2418195.3125,610093.75 -2389203.125,651757.8125 -2353609.375,681345.703125 -2352898.4375,700617.67578125 -2364970.703125,709264.6484375 -2352417.96875,722808.59375 -2337062.5,803609.375 -2296640.625,810781.25 -2270078.125,803367.1875 -2257109.375,793203.125 -2237953.125,820257.8125 -2228359.375,835472.65625 -2214750,840875 -2200671.875,840773.4375 -2182109.375,844546.875 -2161390.625,851812.5 -2136437.5,857652.34375 -2126753.90625,864023.4375 -2115914.0625,911953.125 -2060171.875,919796.875 -2059640.625,922171.875 -2087265.625))","date":1425556944000}) # 7 - LONG SWELL

   polys.append({"wkt":"POLYGON((929921.875 -2095766.0120968,922953.125 -2102719.1370968,916734.375 -2101922.2620968,908046.875 -2117703.5120968,905171.875 -2140266.0120968,866921.875 -2168016.0120968,809921.875 -2230016.0120968,788921.875 -2292016.0120968,780921.875 -2365016.0120968,748921.875 -2388016.0120968,724921.875 -2410516.0120968,731921.875 -2456016.0120968,708421.875 -2467516.0120968,699921.875 -2420016.0120968,701234.375 -2399828.5120968,713046.875 -2378891.0120968,743171.875 -2357266.0120968,757734.375 -2349078.5120968,753046.875 -2316391.0120968,753421.875 -2282016.0120968,757421.875 -2270578.5120968,757921.875 -2249891.0120968,763921.875 -2218016.0120968,787671.875 -2215266.0120968,816203.125 -2185516.0120968,819484.375 -2158016.0120968,822296.875 -2146016.0120968,836421.875 -2118391.0120968,847046.875 -2089891.0120968,886640.625 -2073859.7620968,910109.375 -2038828.5120968,938296.875 -1993141.0120968,926421.875 -1974766.0120968,931484.375 -1965953.5120968,945640.625 -1987734.7620968,956921.875 -2011516.0120968,948421.875 -2052516.0120968,929921.875 -2095766.0120968))","date":1425712392000}) # 8 - CROSS-SWELL

   polys.append({"wkt":"POLYGON((953375 -2066000,939062.5 -2086937.5,925281.25 -2091281.25,912000 -2105625,863375 -2130000,832000 -2186375,824625 -2201625,813250 -2217125,808187.5 -2234750,805375 -2252125,794687.5 -2266500,787750 -2283125,801625 -2299000,805625 -2309250,782250 -2332125,770375 -2331000,746625 -2334500,718000 -2361250,735250 -2365125,744250 -2379125,724250 -2393125,684750 -2411812.5,664187.5 -2381687.5,679140.625 -2360109.375,699093.75 -2345906.25,705296.875 -2321765.625,707398.4375 -2302445.3125,712125 -2285500,717812.5 -2275937.5,730406.25 -2275406.25,746203.125 -2257265.625,751976.5625 -2233945.3125,757925.78125 -2213347.65625,778212.890625 -2244861.328125,782784.66796875 -2276114.74609375,789396.3623046875 -2264928.1005859375,791758.056640625 -2254741.455078125,798356.4453125 -2240368.1640625,808125 -2207000,820062.5 -2186937.5,822125 -2161125,827031.25 -2153312.5,838187.5 -2149500,847343.75 -2127312.5,847421.875 -2099843.75,852625 -2091250,857937.5 -2121187.5,864968.75 -2111156.25,869984.375 -2112265.625,874367.1875 -2085820.3125,881683.59375 -2086722.65625,884966.796875 -2093923.828125,902483.3984375 -2080149.4140625,909875 -2061375,914937.5 -2034250,919500 -2013375,953375 -2066000))","date":1426096800000}) # 9 - Large waves

   polys.append({"wkt":"POLYGON((1297250 149281.25,1130750 92968.75,1110062.5 37781.25,1055500 -14843.75,1034750 -78906.25,1033875 -111187.5,1043562.5 -140468.75,1064218.75 -191000,1082250 -238843.75,1089515.625 -252640.625,1118156.25 -262687.5,1143687.5 -284531.25,1154203.125 -304640.625,1166656.25 -324562.5,1186250 -367843.75,1190250 -396156.25,1244062.5 -408109.375,1264250 -447187.5,1301750 -498328.125,1361562.5 -481648.4375,1386320.3125 -504857.666015625,1387447.265625 -516847.47314453125,1429699.21875 -520087.2802734375,1410453.125 -482441.89453125,1424179.6875 -427651.123046875,1382406.25 -411360.3515625,1312812.5 -394697.265625,1323125 -350371.09375,1301250 -302718.75,1362250 -250718.75,1439250 -150718.75,1306250 -71718.75,1330250 -16718.75,1276250 -7718.75,1311250 62281.25,1292250 97281.25,1292250 97281.25,1297250 149281.25))","date":1426250952000}) # 10

   polys.append({"wkt":"POLYGON((721125 -2247500,753250 -2249125,756250 -2203125,756437.5 -2188156.25,770875 -2178937.5,825562.5 -2172468.75,849531.25 -2184609.375,866140.625 -2172804.6875,872445.3125 -2175902.34375,823097.65625 -2217076.171875,798798.828125 -2281413.0859375,785849.12109375 -2289872.314453125,776774.4140625 -2300331.54296875,764205.810546875 -2301623.6572265625,762512.20703125 -2295665.771484375,749878.6315917969 -2304858.5357666016,734370.0561523438 -2313926.300048828,725852.9052734375 -2323936.8286132812,708693.603515625 -2332582.8857421875,709471.8017578125 -2356291.4428710938,679603.8513183594 -2393156.0821533203,663044.8760986328 -2417588.4017944336,640610.9008789062 -2421020.721435547,624833.1756591797 -2429015.54107666,627120.5053329468 -2435460.5298042297,627157.8350067139 -2444530.5185317993,620857.494354248 -2473170.4959869385,607944.3130493164 -2452700.450897217,609555.4504394531 -2415885.3607177734,620465.2252197266 -2395255.1803588867,638482.6126098633 -2384565.0901794434,653750 -2370875,665343.75 -2360382.8125,673937.5 -2344640.625,703375 -2320156.25,701250 -2311812.5,706500 -2302875,706250 -2292437.5,709500 -2286843.75,708750 -2281000,704875 -2264687.5,705000 -2255500,721125 -2247500))","date":1426485024000}) # 11

   polys.append({"wkt":"POLYGON((992375 -2026218.75,958437.5 -2074218.75,942437.5 -2108218.75,917437.5 -2139218.75,898437.5 -2163218.75,903531.25 -2169156.25,902125 -2174718.75,896937.5 -2182718.75,895437.5 -2196343.75,882750 -2211750,883687.5 -2218906.25,854375 -2234218.75,846375 -2247156.25,845000 -2257093.75,837437.5 -2264218.75,821375 -2277156.25,809687.5 -2291593.75,812187.5 -2303968.75,809437.5 -2313343.75,787562.5 -2316968.75,771937.5 -2345718.75,736937.5 -2362468.75,730562.5 -2381843.75,721437.5 -2397218.75,745437.5 -2381218.75,770687.5 -2388468.75,770312.5 -2394093.75,762812.5 -2401218.75,746000 -2399718.75,737437.5 -2405218.75,703437.5 -2428218.75,669437.5 -2432218.75,613437.5 -2419218.75,613437.5 -2443218.75,608437.5 -2469218.75,616437.5 -2499218.75,607437.5 -2520218.75,595437.5 -2537218.75,566437.5 -2552218.75,543437.5 -2577218.75,529437.5 -2604218.75,502437.5 -2623218.75,480562.5 -2583843.75,496000 -2559656.25,509218.75 -2534437.5,513687.5 -2508468.75,519687.5 -2496468.75,529062.5 -2507343.75,555250 -2495281.25,567062.5 -2491343.75,571453.125 -2483015.625,578593.75 -2462937.5,581250 -2429531.25,588343.75 -2408750,605765.625 -2395234.375,610187.5 -2382468.75,625062.5 -2370968.75,635437.5 -2367343.75,655437.5 -2361406.25,688937.5 -2328968.75,709687.5 -2303843.75,718562.5 -2279343.75,729343.75 -2281000,754625 -2301156.25,772812.5 -2275968.75,780312.5 -2316843.75,786875 -2311156.25,802093.75 -2305875,805125 -2288468.75,823343.75 -2267718.75,837578.125 -2252281.25,850937.5 -2231156.25,876125 -2215531.25,890187.5 -2195031.25,893437.5 -2167218.75,893937.5 -2153343.75,913687.5 -2120187.5,934562.5 -2086843.75,941875 -2068593.75,960406.25 -2050843.75,975296.875 -2037781.25,992375 -2026218.75))","date":1428427440000}) # 12

   polys.append({"wkt":"POLYGON((933937.5 -2132937.5,948687.5 -2107937.5,968937.5 -2097687.5,969687.5 -2077437.5,995687.5 -2055312.5,1002562.5 -2049312.5,999437.5 -2038687.5,1018187.5 -2018937.5,1008437.5 -2013437.5,1021187.5 -2001687.5,1041687.5 -1985437.5,1053687.5 -1966187.5,1035437.5 -1937187.5,1012437.5 -1951937.5,1007687.5 -1924687.5,986187.5 -1899187.5,974000 -1939562.5,967656.25 -1961062.5,964875 -1980500,961062.5 -2000468.75,959625 -2011046.875,959812.5 -2021750,958437.5 -2039312.5,952312.5 -2049312.5,940687.5 -2087437.5,928187.5 -2092625,920062.5 -2106875,917687.5 -2120687.5,906812.5 -2160375,929437.5 -2185687.5,937187.5 -2155437.5,933937.5 -2132937.5))","date":1428510456000}) # 13

   polys.append({"wkt":"POLYGON((-2058236.8056063 522587.09178330004,-2047518.0556063 544462.0917833,-2038018.0556063 563462.0917833,-2028518.0556063 592962.0917833,-2014518.0556063 598462.0917833,-2005018.0556063 596462.0917833,-1999018.0556063 588462.0917833,-1991018.0556063 597587.0917833,-1989518.0556063 609462.0917833,-1974018.0556063 623962.0917833,-1961518.0556063 642462.0917833,-1964518.0556063 661962.0917833,-1952643.0556063 677587.0917833,-1932143.0556063 694087.0917833,-1921518.0556063 707962.0917833,-1911518.0556063 717462.0917833,-1908018.0556063 723462.0917833,-1915518.0556063 729430.8417833,-1917768.0556063 724196.4667833,-1923018.0556063 718079.2792833,-1927736.8056063 714583.1855333,-1929908.6806063 710930.8417833,-1932117.6649813 708821.4667833,-1934357.8993563 706774.5917833,-1939150.8681063 703118.3417833,-1944232.8993563 699923.0292833,-1949752.4306063 697196.4667833,-1952607.8993563 695114.4355333,-1959900.8681063 692032.4042833,-1965131.3368563 689794.1230333,-1968652.8212313 687143.7324083,-1969768.0556063 685962.0917833,-1974158.6806063 682868.3417833,-1976525.8681063 680696.4667833,-1976459.4618563 679579.2792833,-1974689.9306063 677305.8417833,-1974260.2431063 674102.7167833,-1973889.1493563 670860.5292833,-1977391.1024813 665770.6855333,-1977330.5556063 660852.7167833,-1978275.8681063 657741.3886583,-1981670.3993563 661888.8495958,-1981573.7196688 659066.339830175,-1981148.9149813 656275.08006455,-1980591.2977938 653249.445298925,-1980939.9306063 650083.1855333,-1982588.3681063 646667.1699083,-1984428.2118563 643177.9120958,-1985658.6806063 639610.5292833,-1991596.1806063 630090.9980333,-1999283.6806063 622243.3417833,-2001865.7118563 620251.1542833,-2005135.2431063 618977.7167833,-2009893.0556063 617555.8417833,-2011330.5556063 616153.4980333,-2019705.5556063 613313.6542833,-2024424.3056063 611161.3105333,-2029018.0556063 608446.4667833,-2037643.0556063 602110.5292833,-2041971.1806063 598848.8105333,-2044971.1806063 595868.3417833,-2045728.9931063 594258.9667833,-2045107.8993563 590876.1542833,-2045187.9774813 586059.7480333,-2044799.3056063 581555.8417833,-2044596.1806063 579110.5292833,-2044830.5556063 576821.4667833,-2045588.3681063 574762.8730333,-2047189.9306063 572329.2792833,-2049518.0556063 567962.0917833,-2053143.0556063 560868.3417833,-2052611.8056063 559446.4667833,-2051689.9306063 559173.0292833,-2051103.9931063 557942.5605333,-2051373.5243563 556577.3261583,-2053711.4149813 554941.5839708,-2054971.1806063 553040.2167833,-2054158.6806063 549821.4667833,-2053564.9306063 546102.7167833,-2054775.8681063 543235.5292833,-2054037.5868563 540817.5605333,-2055689.9306063 536415.2167833,-2058713.3681063 530641.7792833,-2060943.8368563 527708.1855333,-2062424.3056063 525133.9667833,-2058236.8056063 522587.09178330004))","date":1444644000000}) # 14 - ONR cruise

   return polys
####################################################################################################


