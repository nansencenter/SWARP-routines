" Standard settings
  let myfiletypefile = "~/.vim/myfiletypes.vim"
  let mysyntaxfile="~/.vim/mysyntax.vim"
  menu Mysyntax.f90 :cal SetSyn("fortran90")


  " Set indenting and fortran specifics
  filetype plugin indent on
  "let fortran_do_enddo=1  
  "
  let s:extfname = expand("%:e")
  if s:extfname ==? "F90" || s:extfname ==? "f90"
     let fortran_dialect="f90"
     let fortran_free_source=1
     set filetype=fortran
  elseif s:extfname ==? ".F" || s:extfname ==? ".f"
     let fortran_dialect="f77"
     let fortran_fixed_source=1
     set filetype=fortran
  endif
  let fortran_more_precise=1

  syntax on
  "highlight Normal      guibg=#400080 guifg=#ffffff
  "highlight Cursor      guibg=#ff0000 guifg=NONE
  "highlight NonText     guibg=#000000
"  highlight Search      guibg=#0000ff
  "highlight search      ctermfg=black ctermbg=yellow  guibg=#0000ff
  highlight Comment     term=bold ctermfg=Cyan  guifg=#c0c0c0
  "highlight Constant    term=NONE ctermfg=blue ctermbg=yellow  guifg=#ff00ff
  "highlight Special     term=bold ctermfg=LightRed  guifg=#ff0000
  "highlight Identifier  term=underline cterm=bold ctermfg=Cyan guifg=#00ffff
  "highlight Statement   term=bold ctermfg=Yellow guifg=#ffff00 gui=NONE
  "highlight PreProc     term=underline ctermfg=White ctermbg=Red  guifg=#00ffff
  "highlight Type        term=underline ctermfg=Cyan guifg=#00ff00 gui=NONE
  "highlight Operator    term=NONE ctermfg=Cyan guifg=#00ffff
   set backspace=2   "make backspace work
   set hlsearch
   set mousehide
   set report=1
   set showmode
   set wrapmargin=8
   set shiftwidth=3
   set autoindent
   set showmatch
   set showmode
   set softtabstop=3
   set expandtab
   set vb 

   " SHOW LINE NUMBERS
   set number
   " HIDE LINE NUMBERS
   "set nonumber

  "au BufReadPost    * call Settabstop()
   au BufRead,Bufnew *.F90 set filetype=fortran
   au BufRead,Bufnew *.f90 set filetype=fortran
   au BufRead,Bufnew *.F   set filetype=fortran
   au BufRead,Bufnew *.f   set filetype=fortran
   au BufRead,Bufnew *.m   set filetype=matlab

   "KEYBOARD MAPPINGS:
   map ,v :sp ~/.vimrc<CR>       "split-open .vimrc
   map ,e :e ~/.vimrc<CR>        "open .vimrc
   map ,u :source ~/.vimrc<CR>   "run .vimrc

  "move 'equals' to next tab (aligns equations)                  *works*
   map [ 0f=i<TAB><ESC>
   map ,[ 0f=i<TAB><ESC>la <ESC>
   map ] i<TAB><ESC>

   "add extra curly brackets (for bibtex)
   map ,tb 0f{i{<ESC>l%a}<ESC>^
   "make rest of line lower (or upper) case
   map ,nc v$~
   
   map ,n :next<CR>
   map ,p :previous<CR>
   map ,f :rew<CR>
   map ,c :close<CR>   

   map ms :!mksem ONRvisit19Jan2012

   ""TW macros beteen !**!
   ""!**!
   "" nnoremap ; :
   "" nnoremap : ;

   "" "matlab tidy code writing (align equals)
   "" map! mif if<SPACE><ESC>oend<ESC>kA
   "" map! mfor for<SPACE><ESC>oend<ESC>kA
   "" map! ,= <TAB>=<SPACE>
   "" map! .= <SPACE>=<SPACE>

   "" "if variable doesn't exist clause (matlab)
   "" map! mne if ~exist('')<SPACE><ESC>oend<ESC>k$2hi
   "" map ,ne iif ~exist('')<RETURN>end<ESC>O
   "" "map  ,ne ywoif ~exist('')<SPACE><ESC>oend<ESC>k$2hPo<ESC>pA<TAB>=<SPACE><ESC>>>A

   "" "fortran: add 'end' automatically after 'do' and 'if'
   "" map! fdo do<ESC>oend do<ESC>kA
   "" map! fif if () then<ESC>oend if<ESC>k0f(a
   "" map! fcf #if defined ()<ESC>0d^o#endif<ESC>0d^k0f(a
   "" map! #else #else<ESC>0dwo

   "" "bash if:
   "" map! bif if<SPACE>[<SPACE><SPACE>]<RETURN>then<RETURN>fi<ESC>kkf[2li

   "" "c comment:
   "" map! c// /**/<ESC>hi

   "" "python long comment:
   "" map! p// """<ESC>yypO
   "" "python if:
   "" map! pif if :<ESC>i
   ""!**!

  "text to go at start of new matlab file:
   map ,nmf i%% <ESC>"%p<ESC>o%% Author: Timothy Williams<CR>%% Date: <C-r>=strftime("%Y%m%d, %T %Z")<CR><CR>
  "text to go at start of new fortran file:
   map ,nff i!<ESC>"%p<ESC>o!Author: Timothy Williams<CR>!Date:   <C-r>=strftime("%Y%m%d, %T %Z")<CR><CR>

" Restore cursor position to where it was before               
augroup JumpCursorOnEdit
   au!
   autocmd BufReadPost *
           \ if expand("<afile>:p:h") !=? $TEMP |
           \   if line("'\"") > 1 && line("'\"") <= line("$") |
           \     let JumpCursorOnEdit_foo = line("'\"") |
           \     let b:doopenfold = 1 |
           \     if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
           \        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
           \        let b:doopenfold = 2 |
           \     endif |
           \     exe JumpCursorOnEdit_foo |
           \   endif |
           \ endif
   " Need to postpone using "zv" until after reading the modelines.
  autocmd BufWinEnter *
          \ if exists("b:doopenfold") |
          \   exe "normal zv" |
          \   if(b:doopenfold > 1) |
          \       exe  "+".1 |
          \   endif |
          \   unlet b:doopenfold |
          \ endif
augroup END

   "FUNCTIONS TO CHANGE FONT SIZE (:LargerFont or :SmallerFont);
  let s:pattern = '^\(.* \)\([1-9][0-9]*\)$'
  let s:minfontsize = 6
  let s:maxfontsize = 16
  function! AdjustFontSize(amount)
     if has("gui_gtk2") && has("gui_running")
        let fontname = substitute(&guifont, s:pattern, '\1', '')
        let cursize = substitute(&guifont, s:pattern, '\2', '')
        let newsize = cursize + a:amount
        if (newsize >= s:minfontsize) && (newsize <= s:maxfontsize)
           let newfont = fontname . newsize
           let &guifont = newfont
        endif
     else
        echoerr "You need to run the GTK2 version of Vim to use this function."
     endif
  endfunction

  function! LargerFont()
     call AdjustFontSize(1)
  endfunction
  command! LargerFont call LargerFont()

  function! SmallerFont()
     call AdjustFontSize(-1)
  endfunction
  command! SmallerFont call SmallerFont()
